Исследование поведения программы с процессом-родителем и процессом-ребенком выполняющим разные действия
Цель: выяснить по поведению процессов, насколько процесс-ребенок независим от процесса-родителя

Исходный код программы:
//Программа, порождающая дочерний процесс (часть 2).
//Процесс-родитель и процесс-ребёнок должны выполнят разные действия
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
        pid_t procid, pprocid;
        int a=0, b;
        procid = getpid();
        pprocid = getppid();
        printf("До вызова fork()\n");
        printf("ID текущего процесса %d\nID родительского процесса: %d\n", procid, pprocid);
        printf("Начальное значение a: %d\n", a);
        b = fork();
        if (b<0) {
                //Во вреия выполнения fork() произошла ошибка. Выходим из программы с возвратом кода -1
                printf("Ошибка при выполнении fork()\n");
                exit(-1); //выход из программы
        }
        else if(b==0){
                printf("\n\nПоявился дочерний процесс, получил значение %d\n", b);
                a = a+1; //проверяем изменениие значений переиенной a
                procid = getpid();
                pprocid = getppid();
                printf("После  вызова fork() в процессе-ребёнке\n");
                printf("ID текущего процесса %d\nID родительского процесса: %d\nНовое значение a: %d\n", procid, pprocid, a);
        }
        else {
                printf("\n\nРодительский процесс после вызова fork() получил ID ребёнка: %d\n",b);
                a = a+1111; //проверяем изменениие значений переиенной a
                procid = getpid();
                pprocid = getppid();
                printf("Идентификаторы процесса-родителя:\n");
                printf("ID текущего процесса %d\nID родительского процесса: %d\nНовое значение a: %d\n", procid, pprocid, a);
        }
        return 0;
}

Результат выполнения программы:
----

До вызова fork()
ID текущего процесса: 17732
ID родительского процесса: 17658
Начальное значение a: 0


Родительский процесс после вызова fork() получил ID ребёнка: 17733
Идентификаторы процесса-родителя:
ID текущего процесса: 17732
ID родительского процесса: 17658
Новое значение a: 1111


Появился дочерний процесс, получил значение 0
После  вызова fork() в процессе-ребёнке
ID текущего процесса: 17733
ID родительского процесса: 17732
Новое значение a: 1

----
Значение переменной а внутри процесса-ребенка не зависит от значения переменной а внутри процесса родителя. Из чего можно сделать вывод, что родитель и ребенок выполняются в отдельных адресных пространствах.
