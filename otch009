Работа с pipe. Часть 1

Для работы с pipe можно воспользоваться системными вызовами write() для записи и read() для чтения, аналогично тому как это делалось для записи в файл и чтении из файла. Различие в том, что при чтении из файда информациия не исчезает, а байт, прочитанный из pipe удаляется.
Для создания pipe используется системный вызов pipe(), которому в качестве параметра должен быть передан массив из двух целых чисел. Элемент массива с индексом 0 используется как файловый дескриптор для чтения, а элемент с индексом 1 используестя для записи.

Пример:
int fd[2];
pipe(fd);

Таблица файловых дескрипторов наследуется дочерним процессом от родительского, поэтому процесс-ребенок может передавать информацию через pipe любому из своих предков, так же, как и читать информацию, отправленную ими в pipe.
Pipe существует пока хотя бы один из его потоков не закрыт. Для этого нужно, чтобы каждый родственный прцоесс завершил работу, или в процессе работы явно закрыл входной и выходной потоки.

Работа с pipe. Часть 2
Двунаправленная связь между родственными процессами

Для организации двунаправленной связи легче всего использовать 2 отдельных канала связи - pipe1 и pipe2. 1 будет передавать информацию от процесса-родителя процессу-ребенку, а 2 - в обратном направлении.

Файловые дескрипторы разных пайпов будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток пайп1 (close(fd1[0])), а также выходной поток пайп2 (close(fd2[1]))
Для дочернего процесса закрываем выходной поток пайп1 и входной поток пайп2
После записи информации в пайп родительским процессом выполняется чтение информации из пайп2, при этом дочерний процесс еще ничего не записал в пайп2. Поэтому родительский процесс при попытке чтения из пайп2 блокируется и ждет появления информации.
Информация от дочернего процесса в пайп2 появляется после того, как процесс-ребенок прочитает информации из пайп1.
Поэтому дочерний процесс заканчивает работу раньше, чем процесс-родитель прочитает информацию от него из пайп2.

Результат выполнения программы pr009m2.out:

Читаем строку, отправленную процессом-ребенком...
Строка, прочитанная дочерним процессом: Информация для дочернего процесса от родителя
Процесс-ребенок завершил работу
Прочитанная родителем строка: Информация для родительского процесса от ребенка
Процесс родитель завершил работу
